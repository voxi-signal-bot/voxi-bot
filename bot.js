const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();
const crypto = require('crypto');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const BOT_TOKEN = 'YOUR_BOT_TOKEN_HERE'; // –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const CHANNEL_ID = '@YourChannel'; // ID –≤–∞—à–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞
const MINI_APP_URL = 'https://your-mini-app-url'; // URL –≤–∞—à–µ–≥–æ Mini App
const APP_URL = 'https://your-railway-app-url'; // URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway
const POSTBACK_SECRET = 'your_1win_secret'; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ—Å—Ç–±—ç–∫–æ–≤
const REFERRAL_BASE_LINK = 'https://1wgxql.com/v3/aggressive-casino?p=qmgo&promocode=VIP662';

const bot = new Telegraf(BOT_TOKEN);
const app = express();
const db = new sqlite3.Database('users.db');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS users (
    user_id TEXT PRIMARY KEY,
    language TEXT,
    subscribed INTEGER DEFAULT 0,
    registered INTEGER DEFAULT 0,
    deposited INTEGER DEFAULT 0
  )`);
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –∏ URL-encoded –¥–∞–Ω–Ω—ã—Ö
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use('/miniapp', express.static('miniapp')); // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ Mini App

// Webhook –¥–ª—è Telegram
app.post('/webhook', async (req, res) => {
  try {
    await bot.handleUpdate(req.body);
    res.sendStatus(200);
  } catch (err) {
    console.error('Error processing webhook:', err);
    res.sendStatus(500);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–±—ç–∫–æ–≤ –æ—Ç 1win
app.get('/postback', (req, res) => {
  console.log('Received postback:', req.query);
  const { event_id, sub1: user_id, amount, signature } = req.query;

  if (!user_id) {
    console.error('Missing user_id in postback');
    return res.status(400).send('Missing user_id');
  }

  if (POSTBACK_SECRET && signature) {
    if (!verifySignature(req.query, POSTBACK_SECRET)) {
      console.error('Invalid signature in postback');
      return res.status(403).send('Invalid signature');
    }
  }

  if (event_id === 'registration') {
    db.run(`UPDATE users SET registered = 1 WHERE user_id = ?`, [user_id], (err) => {
      if (err) console.error('DB error on registration:', err);
    });
    const message = getMessage('registration_success', getUserLanguage(user_id));
    bot.telegram.sendMessage(user_id, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: getMessage('deposit_button', getUserLanguage(user_id)), url: `${REFERRAL_BASE_LINK}&sub1=${user_id}` }]
        ]
      }
    }).catch(err => console.error('Error sending registration message:', err));
  } else if (event_id === 'deposit') {
    const depositAmount = parseFloat(amount);
    if (depositAmount >= 10) {
      db.run(`UPDATE users SET deposited = 1 WHERE user_id = ?`, [user_id], (err) => {
        if (err) console.error('DB error on deposit:', err);
      });
      const message = getMessage('select_game', getUserLanguage(user_id));
      bot.telegram.sendMessage(user_id, message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: getMessage('aviator_button', getUserLanguage(user_id)), callback_data: 'game_aviator' }],
            [{ text: getMessage('luckyjet_button', getUserLanguage(user_id)), callback_data: 'game_luckyjet' }],
            [{ text: getMessage('mines_button', getUserLanguage(user_id)), callback_data: 'game_mines' }]
          ]
        }
      }).catch(err => console.error('Error sending deposit message:', err));
    }
  }
  res.sendStatus(200);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –ø–æ—Å—Ç–±—ç–∫–∞
function verifySignature(query, secret) {
  const receivedSignature = query.signature;
  const data = Object.keys(query)
    .filter(k => k !== 'signature')
    .sort()
    .map(k => `${k}=${query[k]}`)
    .join('&');
  const computedSignature = crypto.createHmac('sha256', secret).update(data).digest('hex');
  return receivedSignature === computedSignature;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserLanguage(user_id) {
  let language = 'ru';
  db.get(`SELECT language FROM users WHERE user_id = ?`, [user_id], (err, row) => {
    if (err) console.error('DB error on language fetch:', err);
    if (row) language = row.language;
  });
  return language;
}

// –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
const messages = {
  ru: {
    welcome: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, Voxy_Soft! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ - –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ü§ù',
    subscribe_button: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª',
    check_subscription: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
    main_menu: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    registration_button: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
    instruction_button: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
    select_language_button: '–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫',
    help_button: 'Help',
    get_signal_button: '–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª',
    registration_error: '‚ö†Ô∏è –û—à–∏–±–∫–∞: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞! ‚ú¶ –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ - VIP662 ‚óè –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞.',
    register_button: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
    back_to_menu: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    instruction: `ü§ñ –ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –∏ –æ–±—É—á–µ–Ω –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ OpenAI!
‚öúÔ∏è –î–ª—è –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞ –±—ã–ª–æ —Å—ã–≥—Ä–∞–Ω–æ üé∞ 30,000 –∏–≥—Ä.
–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç 15-25% –æ—Ç —Å–≤–æ–µ–≥–æ üí∏ –∫–∞–ø–∏—Ç–∞–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!
–ë–æ—Ç –≤—Å–µ –µ—â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –¢–æ—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 92%!
–ß—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
üü¢ 1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ [1WIN](${REFERRAL_BASE_LINK}&sub1={user_id})
[–ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å VPN (–®–≤–µ—Ü–∏—è). –í Play Market/App Store –µ—Å—Ç—å –º–Ω–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: Vpnify, Planet VPN, Hotspot VPN –∏ —Ç.–¥.!]
‚ùóÔ∏è –ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç ‚ùóÔ∏è
üü¢ 2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ —Å—á–µ—Ç–∞.
üü¢ 3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –∏–≥—Ä 1win –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É.
üü¢ 4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≤—É—à–µ–∫ –Ω–∞ —Ç—Ä–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ!
üü¢ 5. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–∏–≥–Ω–∞–ª —É –±–æ—Ç–∞ –∏ —Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞–≤–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ—Ç –±–æ—Ç–∞.
üü¢ 6. –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–¥–≤–æ–∏—Ç—å (x¬≤) –≤–∞—à—É —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã—Ç—å —É–±—ã—Ç–æ–∫ —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.`,
    registration_success: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π! ü•≥\nüåê –®–∞–≥ 2 - –í–Ω–µ—Å–∏ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç.\n‚ú¶ –ß–µ–º –±–æ–ª—å—à–µ –¥–µ–ø–æ–∑–∏—Ç, —Ç–µ–º –±–æ–ª—å—à–µ –£–†–û–í–ï–ù–¨ –≤ –±–æ—Ç–µ, –∞ —á–µ–º –±–æ–ª—å—à–µ —É—Ä–æ–≤–µ–Ω—å –≤ –±–æ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å.\n‚óè –ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞, –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞.',
    deposit_button: '–í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç',
    select_game: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:',
    aviator_button: 'AVIATOR',
    luckyjet_button: 'LUCKY JET',
    mines_button: 'MINES',
    luckyjet_welcome: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VOXI SIGNAL LUCKY JET
LUCKY JET - —ç—Ç–æ –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–π—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Ä–∞–∫–µ—Ç–∫–∞ —É–ª–µ—Ç–∏—Ç.
–ß–µ–º –¥–æ–ª—å—à–µ –≤—ã –∂–¥–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å, –Ω–æ –µ—Å–ª–∏ —Ä–∞–∫–µ—Ç–∫–∞ —É–ª–µ—Ç–∏—Ç –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –∑–∞–±–µ—Ä–µ—Ç–µ —Å—Ç–∞–≤–∫—É, –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ.
–ù–∞—à –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏!`,
    get_signal: '–ü–û–õ–£–ß–ò–¢–¨ –°–ò–ì–ù–ê–õ'
  },
  en: {
    welcome: 'Welcome, Voxy_Soft! To use the bot, subscribe to our channel ü§ù',
    subscribe_button: 'Subscribe to channel',
    check_subscription: 'Check',
    main_menu: 'Main menu:',
    registration_button: 'Registration',
    instruction_button: 'Instruction',
    select_language_button: 'Select language',
    help_button: 'Help',
    get_signal_button: 'Get signal',
    registration_error: '‚ö†Ô∏è Error: Registration not completed! ‚ú¶ Be sure to enter the promo code - VIP662 ‚óè You will receive a notification in the bot after registration.',
    register_button: 'Register',
    back_to_menu: 'Back to main menu',
    instruction: `ü§ñ The bot is built and trained on OpenAI's cluster neural network!
‚öúÔ∏è 30,000 games üé∞ were played to train the bot.
Currently, bot users successfully generate 15-25% of their üí∏ capital daily!
The bot is still undergoing checks and fixes! The bot's accuracy is 92%!
To achieve maximum profit, follow this instruction:
üü¢ 1. Register at the [1WIN](${REFERRAL_BASE_LINK}&sub1={user_id}) bookmaker
[If it doesn't open, use a VPN (Sweden). There are many free services in Play Market/App Store, e.g., Vpnify, Planet VPN, Hotspot VPN, etc.!]
‚ùóÔ∏è Without registration and promo code, access to signals will not be granted ‚ùóÔ∏è
üü¢ 2. Fund your account balance.
üü¢ 3. Go to the 1win games section and select a game.
üü¢ 4. Set the number of traps to three. This is important!
üü¢ 5. Request a signal from the bot and place bets according to the bot's signals.
üü¢ 6. In case of an unsuccessful signal, we recommend doubling (x¬≤) your bet to fully cover the loss with the next signal.`,
    registration_success: 'Congratulations on successful registration! ü•≥\nüåê Step 2 - Make your first deposit.\n‚ú¶ The larger the deposit, the higher the LEVEL in the bot, and the higher the level, the more high-probability signals you will receive.\n‚óè You will receive a notification in the bot after the first deposit.',
    deposit_button: 'Make deposit',
    select_game: 'Select game:',
    aviator_button: 'AVIATOR',
    luckyjet_button: 'LUCKY JET',
    mines_button: 'MINES',
    luckyjet_welcome: `Welcome to VOXI SIGNAL LUCKY JET
LUCKY JET is a game where you must bet on an increasing multiplier before the rocket flies away.
The longer you wait, the more you can win, but if the rocket flies away before you cash out, you lose.
Our bot can help determine the optimal moment to bet!`,
    get_signal: 'GET SIGNAL'
  },
  // –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è hi, pt, es, uz, az, tr
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
function getMessage(key, lang, user_id = '') {
  let message = messages[lang]?.[key] || messages.ru[key];
  if (user_id) message = message.replace('{user_id}', user_id);
  return message;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function checkSubscription(ctx) {
  try {
    const chatMember = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.chat.id);
    return ['member', 'administrator', 'creator'].includes(chatMember.status);
  } catch (err) {
    console.error('Error checking subscription:', err);
    return false;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  const chatId = ctx.chat.id;
  db.get(`SELECT * FROM users WHERE user_id = ?`, [chatId], (err, row) => {
    if (err) {
      console.error('DB error on user check:', err);
      return;
    }
    if (!row) {
      db.run(`INSERT INTO users (user_id) VALUES (?)`, [chatId], (err) => {
        if (err) console.error('DB error on user insert:', err);
      });
      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data: 'lang_ru' }, { text: 'English üá¨üáß', callback_data: 'lang_en' }],
            [{ text: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä üáÆüá≥', callback_data: 'lang_hi' }, { text: 'Portugu√™s üáßüá∑', callback_data: 'lang_pt' }],
            [{ text: 'Espa√±ol üá™üá∏', callback_data: 'lang_es' }, { text: 'O ªzbek üá∫üáø', callback_data: 'lang_uz' }],
            [{ text: 'Az…ôrbaycan üá¶üáø', callback_data: 'lang_az' }, { text: 'T√ºrk√ße üáπüá∑', callback_data: 'lang_tr' }]
          ]
        }
      }).catch(err => console.error('Error sending language selection:', err));
    } else {
      sendWelcomeMessage(ctx, row.language);
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
  const chatId = ctx.chat.id;
  const data = ctx.callbackQuery.data;

  if (data.startsWith('lang_')) {
    const lang = data.split('_')[1];
    db.run(`UPDATE users SET language = ? WHERE user_id = ?`, [lang, chatId], (err) => {
      if (err) console.error('DB error on language update:', err);
    });
    await sendWelcomeMessage(ctx, lang);
  } else if (data === 'check_subscription') {
    const isSubscribed = await checkSubscription(ctx);
    if (isSubscribed) {
      db.run(`UPDATE users SET subscribed = 1 WHERE user_id = ?`, [chatId], (err) => {
        if (err) console.error('DB error on subscription update:', err);
      });
      await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
      await sendMainMenu(ctx, getUserLanguage(chatId));
    } else {
      ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!', true).catch(err => console.error('Error answering callback:', err));
    }
  } else if (data === 'main_menu') {
    await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
    await sendMainMenu(ctx, getUserLanguage(chatId));
  } else if (data === 'registration') {
    await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
    const lang = getUserLanguage(chatId);
    ctx.reply(getMessage('registration_error', lang), {
      reply_markup: {
        inline_keyboard: [
          [{ text: getMessage('register_button', lang), url: `${REFERRAL_BASE_LINK}&sub1=${chatId}` }],
          [{ text: getMessage('back_to_menu', lang), callback_data: 'main_menu' }]
        ]
      }
    }).catch(err => console.error('Error sending registration error:', err));
  } else if (data === 'instruction') {
    await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
    const lang = getUserLanguage(chatId);
    ctx.reply(getMessage('instruction', lang, chatId), {
      reply_markup: {
        inline_keyboard: [
          [{ text: getMessage('back_to_menu', lang), callback_data: 'main_menu' }]
        ]
      }
    }).catch(err => console.error('Error sending instruction:', err));
  } else if (data === 'select_language') {
    await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data: 'lang_ru' }, { text: 'English üá¨üáß', callback_data: 'lang_en' }],
          [{ text: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä üáÆüá≥', callback_data: 'lang_hi' }, { text: 'Portugu√™s üáßüá∑', callback_data: 'lang_pt' }],
          [{ text: 'Espa√±ol üá™üá∏', callback_data: 'lang_es' }, { text: 'O ªzbek üá∫üáø', callback_data: 'lang_uz' }],
          [{ text: 'Az…ôrbaycan üá¶üáø', callback_data: 'lang_az' }, { text: 'T√ºrk√ße üáπüá∑', callback_data: 'lang_tr' }]
        ]
      }
    }).catch(err => console.error('Error sending language selection:', err));
  } else if (data === 'help') {
    ctx.reply('–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'Support', url: 'https://t.me/Soft1win1' }]
        ]
      }
    }).catch(err => console.error('Error sending help:', err));
  } else if (data === 'get_signal') {
    db.get(`SELECT * FROM users WHERE user_id = ?`, [chatId], async (err, row) => {
      if (err) {
        console.error('DB error on signal check:', err);
        return;
      }
      const lang = getUserLanguage(chatId);
      if (!row.registered) {
        await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
        ctx.reply(getMessage('registration_error', lang), {
          reply_markup: {
            inline_keyboard: [
              [{ text: getMessage('register_button', lang), url: `${REFERRAL_BASE_LINK}&sub1=${chatId}` }],
              [{ text: getMessage('back_to_menu', lang), callback_data: 'main_menu' }]
            ]
          }
        }).catch(err => console.error('Error sending registration error:', err));
      } else if (!row.deposited) {
        await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
        ctx.reply(getMessage('registration_success', lang), {
          reply_markup: {
            inline_keyboard: [
              [{ text: getMessage('deposit_button', lang), url: `${REFERRAL_BASE_LINK}&sub1=${chatId}` }],
              [{ text: getMessage('back_to_menu', lang), callback_data: 'main_menu' }]
            ]
          }
        }).catch(err => console.error('Error sending deposit prompt:', err));
      } else {
        await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
        ctx.reply(getMessage('select_game', lang), {
          reply_markup: {
            inline_keyboard: [
              [{ text: getMessage('aviator_button', lang), callback_data: 'game_aviator' }],
              [{ text: getMessage('luckyjet_button', lang), callback_data: 'game_luckyjet' }],
              [{ text: getMessage('mines_button', lang), callback_data: 'game_mines' }]
            ]
          }
        }).catch(err => console.error('Error sending game selection:', err));
      }
    });
  } else if (data === 'game_luckyjet') {
    await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
    const lang = getUserLanguage(chatId);
    ctx.reply(getMessage('luckyjet_welcome', lang), {
      reply_markup: {
        inline_keyboard: [
          [{ text: getMessage('get_signal', lang), url: MINI_APP_URL }]
        ]
      }
    }).catch(err => console.error('Error sending Lucky Jet message:', err));
  }
  ctx.answerCbQuery().catch(err => console.error('Error answering callback:', err));
});

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendWelcomeMessage(ctx, lang) {
  const chatId = ctx.chat.id;
  db.get(`SELECT subscribed FROM users WHERE user_id = ?`, [chatId], async (err, row) => {
    if (err) {
      console.error('DB error on subscription check:', err);
      return;
    }
    if (row.subscribed) {
      await sendMainMenu(ctx, lang);
    } else {
      ctx.reply(getMessage('welcome', lang), {
        reply_markup: {
          inline_keyboard: [
            [{ text: getMessage('subscribe_button', lang), url: `https://t.me${CHANNEL_ID}` }],
            [{ text: getMessage('check_subscription', lang), callback_data: 'check_subscription' }]
          ]
        }
      }).catch(err => console.error('Error sending welcome message:', err));
    }
  });
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function sendMainMenu(ctx, lang) {
  ctx.reply(getMessage('main_menu', lang), {
    reply_markup: {
      inline_keyboard: [
        [{ text: getMessage('registration_button', lang), callback_data: 'registration' }],
        [{ text: getMessage('instruction_button', lang), callback_data: 'instruction' }],
        [{ text: getMessage('select_language_button', lang), callback_data: 'select_language' }],
        [{ text: getMessage('help_button', lang), callback_data: 'help' }],
        [{ text: getMessage('get_signal_button', lang), callback_data: 'get_signal' }]
      ]
    }
  }).catch(err => console.error('Error sending main menu:', err));
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3000;
app.listen(PORT, async () => {
  console.log(`Server running on port ${PORT}`);
  try {
    await bot.telegram.setWebhook(`${APP_URL}/webhook`);
    console.log('Webhook set successfully');
  } catch (err) {
    console.error('Error setting webhook:', err);
  }
});