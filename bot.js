const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();
const crypto = require('crypto');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const TOKEN = '7658852315:AAF_Fq5SyHWZcrVKNTXs6iaexQCg1DNgnGQ'; // –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const MINI_APP_URL = 'https://your-mini-app-domain.com'; // URL –≤–∞—à–µ–≥–æ Mini App (–∑–∞–º–µ–Ω–∏—Ç–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è Mini App)
const REFERRAL_BASE_LINK = 'https://1wgxql.com/v3/aggressive-casino?p=qmgo'; // –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ 1win
const POSTBACK_SECRET = 'YOUR_1WIN_SECRET'; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –ø–æ—Å—Ç–±—ç–∫–æ–≤ (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω 1win, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º)

const bot = new TelegramBot(TOKEN, { polling: false });
const app = express();
const db = new sqlite3.Database('users.db'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite —Å —Ñ–∞–π–ª–æ–º –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS users (
    user_id TEXT PRIMARY KEY,
    language TEXT,
    registered INTEGER DEFAULT 0,
    deposited INTEGER DEFAULT 0
  )`);
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –∏ URL-encoded –¥–∞–Ω–Ω—ã—Ö
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Webhook –¥–ª—è Telegram
app.post('/webhook', (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–±—ç–∫–æ–≤ –æ—Ç 1win
app.get('/postback', (req, res) => {
  console.log('Received postback:', req.query); // –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

  const { event_id, sub1: user_id, amount, signature } = req.query;

  if (!user_id) {
    console.error('Missing user_id in postback');
    return res.status(400).send('Missing user_id');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–µ—Å–ª–∏ 1win –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—å)
  if (POSTBACK_SECRET && signature) {
    if (!verifySignature(req.query, POSTBACK_SECRET)) {
      console.error('Invalid signature in postback');
      return res.status(403).send('Invalid signature');
    }
  }

  if (event_id === 'registration') {
    db.run(`UPDATE users SET registered = 1 WHERE user_id = ?`, [user_id], (err) => {
      if (err) console.error('DB error on registration:', err);
    });
    bot.sendMessage(user_id, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç.\nüî∏ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞ 10$ (1000—Ä—É–±)\n–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º!`).catch(err => {
      console.error('Error sending registration message:', err);
    });
  } else if (event_id === 'deposit') {
    const depositAmount = parseFloat(amount);
    if (depositAmount >= 10) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ (10$)
      db.run(`UPDATE users SET deposited = 1 WHERE user_id = ?`, [user_id], (err) => {
        if (err) console.error('DB error on deposit:', err);
      });
      bot.sendMessage(user_id, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VOXI SIGNAL!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä—É –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –°–∏–≥–Ω–∞–ª—ã`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–í–´–ë–û–† –ò–ì–†–´', callback_data: 'select_game' }],
            [{ text: '–ò–ù–°–¢–†–£–ö–¶–ò–Ø', callback_data: 'instruction' }]
          ]
        }
      }).catch(err => {
        console.error('Error sending deposit message:', err);
      });
    } else {
      bot.sendMessage(user_id, `‚ùå –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ 10$ (1000—Ä—É–±) –∏–ª–∏ –±–æ–ª—å—à–µ.`).catch(err => {
        console.error('Error sending insufficient deposit message:', err);
      });
    }
  }
  res.sendStatus(200);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –ø–æ—Å—Ç–±—ç–∫–∞
function verifySignature(query, secret) {
  const receivedSignature = query.signature;
  const data = Object.keys(query)
    .filter(k => k !== 'signature')
    .sort()
    .map(k => `${k}=${query[k]}`)
    .join('&');
  const computedSignature = crypto.createHmac('sha256', secret).update(data).digest('hex');
  return receivedSignature === computedSignature;
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
  db.get(`SELECT * FROM users WHERE user_id = ?`, [chatId], (err, row) => {
    if (err) {
      console.error('DB error on user check:', err);
      return;
    }
    if (!row) {
      db.run(`INSERT INTO users (user_id) VALUES (?)`, [chatId], (err) => {
        if (err) console.error('DB error on user insert:', err);
      });
      bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
            [{ text: 'Portugu√™s', callback_data: 'lang_pt' }]
          ]
        }
      }).catch(err => {
        console.error('Error sending language selection message:', err);
      });
    } else {
      sendWelcomeMessage(chatId, row.language);
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data.startsWith('lang_')) {
    const lang = data === 'lang_ru' ? 'ru' : 'pt';
    db.run(`UPDATE users SET language = ? WHERE user_id = ?`, [lang, chatId], (err) => {
      if (err) console.error('DB error on language update:', err);
    });
    sendWelcomeMessage(chatId, lang);
  } else if (data === 'get_signal') {
    db.get(`SELECT * FROM users WHERE user_id = ?`, [chatId], (err, row) => {
      if (err) {
        console.error('DB error on signal check:', err);
        return;
      }
      if (!row.registered) {
        const referralLink = `${REFERRAL_BASE_LINK}&sub1=${chatId}`; // –î–æ–±–∞–≤–ª—è–µ–º Telegram ID –≤ sub1
        bot.sendMessage(chatId, `–°–æ–∑–¥–∞–π —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.\n‚ú¶ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç.\n‚ú¶ –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞.\n‚ú¶ –ü–æ—Å–ª–µ —á–µ–≥–æ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º!`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø', url: referralLink }]
            ]
          }
        }).catch(err => {
          console.error('Error sending registration prompt:', err);
        });
      } else if (!row.deposited) {
        bot.sendMessage(chatId, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç.\nüî∏ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞ 10$ (1000—Ä—É–±)\n–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º!`).catch(err => {
          console.error('Error sending deposit prompt:', err);
        });
      } else {
        bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VOXI SIGNAL!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä—É –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –°–∏–≥–Ω–∞–ª—ã`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–í–´–ë–û–† –ò–ì–†–´', callback_data: 'select_game' }],
              [{ text: '–ò–ù–°–¢–†–£–ö–¶–ò–Ø', callback_data: 'instruction' }]
            ]
          }
        }).catch(err => {
          console.error('Error sending game selection prompt:', err);
        });
      }
    });
  } else if (data === 'select_game') {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'AVIATOR', callback_data: 'game_aviator' }],
          [{ text: 'LUCKY JET', callback_data: 'game_luckyjet' }],
          [{ text: 'MINES', callback_data: 'game_mines' }]
        ]
      }
    }).catch(err => {
      console.error('Error sending game selection message:', err);
    });
  } else if (data === 'game_luckyjet') {
    bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VOXI SIGNAL LUCKY JET\nLUCKY JET - —ç—Ç–æ –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–π—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Ä–∞–∫–µ—Ç–∫–∞ —É–ª–µ—Ç–∏—Ç.\n–ß–µ–º –¥–æ–ª—å—à–µ –≤—ã –∂–¥–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å, –Ω–æ –µ—Å–ª–∏ —Ä–∞–∫–µ—Ç–∫–∞ —É–ª–µ—Ç–∏—Ç –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –∑–∞–±–µ—Ä–µ—Ç–µ —Å—Ç–∞–≤–∫—É, –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ.\n–ù–∞—à –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏!`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ü–û–õ–£–ß–ò–¢–¨ –°–ò–ì–ù–ê–õ', url: MINI_APP_URL }]
        ]
      }
    }).catch(err => {
      console.error('Error sending Lucky Jet message:', err);
    });
  } else if (data === 'instruction') {
    bot.sendMessage(chatId, '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: [–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏]').catch(err => {
      console.error('Error sending instruction message:', err);
    });
  }
});

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function sendWelcomeMessage(chatId, lang) {
  const message = lang === 'ru' ?
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VOXI SIGNAL! –ù–ê–® –ë–û–¢ ü§ñ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤–∑–ª–∞–º—ã–≤–∞–µ—Ç –∏–≥—Ä—ã –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä—ã 1win. –û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞—Ç—å —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 89%.' :
    'Bem-vindo ao VOXI SIGNAL! NOSSO BOT ü§ñ usa uma rede neural para hackear jogos da casa de apostas 1win. Ele pode prever com 89% de probabilidade.';
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: lang === 'ru' ? '‚úÖ–ü–û–õ–£–ß–ò–¢–¨ –°–ò–ì–ù–ê–õ‚úÖ' : '‚úÖOBTER SINAL‚úÖ', callback_data: 'get_signal' }]
      ]
    }
  }).catch(err => {
    console.error('Error sending welcome message:', err);
  });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
  bot.setWebHook('https://your-server.com/webhook').then(() => {
    console.log('Webhook set successfully');
  }).catch(err => {
    console.error('Error setting webhook:', err);
  });
});